<?xml version="1.0" encoding="UTF-8"?>
<splice_meta_config version="1.0">
  <!--xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="http://www.splice-dds.org/splice_metaconfig.xsd"-->
  <rootElement name="@CMAKE_PROJECT_NAME@" minOccurrences="1" maxOccurrences="1" version="VLITE">
    <comment><![CDATA[
            <p>@CMAKE_PROJECT_NAME@ is highly configurable, allowing many configuration parameters 
              to be chosen by the user at deployment time by means of easily maintainable XML-file(s).</p>
        ]]></comment>
  </rootElement>
  <element name="Domain" minOccurrences="1" maxOccurrences="1" version="VLITE">
    <comment><![CDATA[
            <p>The Domain identifies the scope of communication.</p>
        ]]></comment>

     <leafInt name="Id" minOccurrences="1" maxOccurrences="1" version="VLITE">
          <comment>
                      <![CDATA[
                    This element specifies the domain Id of the instantiated DDS domain. If several different DDS domains are required to run
                    simultaneously, then they all need to have their own unique domain Id.
                    Note - for maximum interoperability it is recommended that you only select a domain Id from the range 0 &lt;= n &lt;= 230. The domain Id
                    value is used by the DDSI2 service to derive values for the required network communiction endpoints and service reconfiguration is
                    required to use domain id values outside of this range.
                    Please see section 9.6.1 of the Real-time Publish-Subscribe Wire Protocol DDS Interoperability Wire Protocol specification (DDSI), v2.1, formal/2009-01-05 at
                    http://www.omg.org/spec/DDSI/2.1/ for further information.
                    ]]></comment>
          <minimum>0</minimum>
          <maximum>230</maximum>
          <default>0</default>
     </leafInt>
</element>

  <!-- DDSI2E CONFIGURATION AUTOMAGICALLY GENERATED (see src/services/ddsi2e/extract-configuration-xml.awk) -->
  <element name="DDSI2E" minOccurrences="0" maxOccurrences="0" version="COMMERCIAL">
    <comment>
      <![CDATA[
<p>DDSI2 settings ...</p>
      ]]>
    </comment>
    <value>CDR_CLIENT</value>
    <element name="Channels" minOccurrences="0" maxOccurrences="1" version="COMMERCIAL">
      <comment>
        <![CDATA[
<p>This element is used to group a set of channels. The channels are independent data paths through DDSI2E and by using separate threads and setting their priorities appropriately, chanenls can be used to map transport priorities to operating system scheduler priorities, ensuring system-wide end-to-end priority preservation.</p>
        ]]>
      </comment>
      <element name="Channel" minOccurrences="0" maxOccurrences="42" version="COMMERCIAL">
        <comment>
          <![CDATA[
<p>This element defines a channel.</p>
          ]]>
        </comment>
        <attributeString name="Name" required="true" version="COMMERCIAL">
          <comment>
            <![CDATA[
<p>This attribute specifies name of this channel. The name should uniquely identify the channel.</p>
            ]]>
          </comment>
          <maxLength>0</maxLength>
          <default></default>
        </attributeString>
        <attributeInt name="TransportPriority" required="false" version="COMMERCIAL">
          <comment>
            <![CDATA[
<p>This attribute sets the transport priority threshold for the channel. Each DCPS data writer has a "transport_priority" QoS and this QoS is used to select a channel for use by this writer. The selected channel is the one with the largest threshold not greater than the writer's transport priority, and if no such channel exists, the channel with the lowest threshold.</p>
            ]]>
          </comment>
          <default>0</default>
        </attributeInt>
        <leafString name="AuxiliaryBandwidthLimit" minOccurrences="0" maxOccurrences="1" version="COMMERCIAL">
          <comment>
            <![CDATA[
<p>This element specifies the maximum transmit rate of auxiliary traffic on this channel (e.g. retransmits, heartbeats, etc). Bandwidth limiting uses a leaky bucket scheme. The default value "inf" means DDSI2E imposes no limitation, the underlying operating system and hardware will likely limit the maimum transmit rate.</p>
<p>The unit must be specified explicitly. Recognised units: <i>X</i>b/s, <i>X</i>bps for bits/s or <i>X</i>B/s, <i>X</i>Bps for bytes/s; where <i>X</i> is an optional prefix: k for 10<sup>3</sup>, Ki for 2<sup>10</sup>, M for 10<sup>6</sup>, Mi for 2<sup>20</sup>, G for 10<sup>9</sup>, Gi for 2<sup>30</sup>.</p>
            ]]>
          </comment>
          <maxLength>0</maxLength>
          <default>inf</default>
        </leafString>
        <leafString name="DataBandwidthLimit" minOccurrences="0" maxOccurrences="1" version="COMMERCIAL">
          <comment>
            <![CDATA[
<p>This element specifies the maximum transmit rate of new samples and directly related data, for this channel. Bandwidth limiting uses a leaky bucket scheme. The default value "inf" means DDSI2E imposes no limitation, the underlying operating system and hardware will likely limit the maimum transmit rate.</p>
<p>The unit must be specified explicitly. Recognised units: <i>X</i>b/s, <i>X</i>bps for bits/s or <i>X</i>B/s, <i>X</i>Bps for bytes/s; where <i>X</i> is an optional prefix: k for 10<sup>3</sup>, Ki for 2<sup>10</sup>, M for 10<sup>6</sup>, Mi for 2<sup>20</sup>, G for 10<sup>9</sup>, Gi for 2<sup>30</sup>.</p>
            ]]>
          </comment>
          <maxLength>0</maxLength>
          <default>inf</default>
        </leafString>
        <leafInt name="DiffServField" minOccurrences="0" maxOccurrences="1" version="COMMERCIAL">
          <comment>
            <![CDATA[
<p>This element describes the DiffServ setting the channel will apply to the networking messages. This parameter determines the value of the diffserv field of the IP version 4 packets sent on this channel which allows QoS setting to be applied to the network traffic send on this channel.<br/>
Windows platform support for setting the diffserv field is dependent on the OS version.<br/>
For Windows versions XP SP2 and 2003 to use the diffserv field the following parameter should be added to the register:<br/><br>
HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services\TcpIp\Parameters\DisableUserTOSSetting<br/><br/>
The type of this parameter is a DWORD and its value should be set to 0 to allow setting of the diffserv field.<br/><br/>
For Windows version 7 or higher a new API (qWAVE) has been introduced. For these platforms the specified diffserv value is mapped to one of the support traffic types.
The mapping is as follows: 1-8 background traffic; 9-40 excellent traffic; 41-55 audio/video traffic; 56 voice traffic; 57-63 control traffic.
When an application is run without Administrative priveleges then only the diffserv value of 0, 8, 40 or 56 is allowed.</p>
            ]]>
          </comment>
          <default>0</default>
        </leafInt>
      </element>
    </element>
    <element name="Compatibility" minOccurrences="0" maxOccurrences="1" version="COMMERCIAL">
      <comment>
        <![CDATA[
<p>The Compatibility elements allows specifying various settings related to compatability with standards and with other DDSI implementations.</p>
        ]]>
      </comment>
      <leafInt name="AckNackNumbitsEmptySet" minOccurrences="0" maxOccurrences="1" version="COMMERCIAL">
        <comment>
          <![CDATA[
<p>This element governs the representation of an acknowledgement message that does not also negatively-acknowledge some samples. If set to 0, the generated acknowledgements have an invalid form and will be reject by the strict and pedantic conformance modes, but several other implementation require this setting for smooth interoperation.</p>
<p>If set to 1, all acknowledgements sent by DDSI2E adhere the form of acknowledgement messages allowed by the standard, but this causes problems when interoperating with these other implementations. The strict and pedantic standards conformance modes always overrule an AckNackNumbitsEmptySet=0 to prevent the transmitting of invalid messages.</p>
          ]]>
        </comment>
        <default>0</default>
      </leafInt>
      <leafBoolean name="ArrivalOfDataAssertsPpAndEpLiveliness" minOccurrences="0" maxOccurrences="1" version="COMMERCIAL">
        <comment>
          <![CDATA[
<p>When set to true, arrival of a message from a peer asserts liveliness of that peer. When set to false, only SPDP and explicit lease renewals have this effect.</p>
          ]]>
        </comment>
        <default>true</default>
      </leafBoolean>
      <leafBoolean name="AssumeRtiHasPmdEndpoints" minOccurrences="0" maxOccurrences="1" version="COMMERCIAL">
        <comment>
          <![CDATA[
<p>This option assumes ParticipantMessageData endpoints required by the liveliness protocol are present in RTI participants even when not properly advertised by the participant discovery protocol.</p>
          ]]>
        </comment>
        <default>false</default>
      </leafBoolean>
      <leafBoolean name="ExplicitlyPublishQosSetToDefault" minOccurrences="0" maxOccurrences="1" version="COMMERCIAL">
        <comment>
          <![CDATA[
<p>This element specifies whether QoS settings set to default values are explicitly published in the discovery protocol. Implementations are to use the default value for QoS settings not published, which allows a significant reduction of the amount of data that needs to be exchanged for the discovery protocol, but this requires all implementations to adhere to the default values specified by the specifications.</p>
<p>When interoperability is required with an implementation that does not follow the specifications in this regard, setting this option to true will help.</p>
          ]]>
        </comment>
        <default>false</default>
      </leafBoolean>
      <leafBoolean name="ManySocketsMode" minOccurrences="0" maxOccurrences="1" version="COMMERCIAL">
        <comment>
          <![CDATA[
<p>This option specifies whether a network socket will be created for each domain participant on a host. The specification seems to assume that each participant has a unique address, and setting this option will ensure this to be the case. This is not the defeault.</p>
<p>Disabling it slightly improves performance and reduces network traffic somewhat. It also causes the set of port numbers needed by DDSI2E to become predictable, which may be useful for firewall and NAT configuration.</p>
          ]]>
        </comment>
        <default>false</default>
      </leafBoolean>
      <leafBoolean name="RespondToRtiInitZeroAckWithInvalidHeartbeat" minOccurrences="0" maxOccurrences="1" version="COMMERCIAL">
        <comment>
          <![CDATA[
<p>This element allows a closer mimicking of the behaviour of some other DDSI implementations, albeit at the cost of generating even more invalid messages. Setting it to true ensures a Heartbeat can be sent at any time when a remote node requests one, setting it to false delays it until a valid one can be sent.</p>
<p>The latter is fully compliant with the specification, and no adverse effects have been observed. It is the default.</p>
          ]]>
        </comment>
        <default>false</default>
      </leafBoolean>
      <leafEnum name="StandardsConformance" minOccurrences="0" maxOccurrences="1" version="COMMERCIAL">
        <comment>
          <![CDATA[
<p>This element sets the level of standards conformance of this instance of the DDSI2E Service. Stricter conformance typically means less interoperability with other implementations. Currently three modes are defined:</p>
<ul><li><i>pedantic</i>: very strictly conform to the specification, ultimately for compliancy testing, but currently of little value because it adheres even to what will most likely turn out to be editing errors in the DDSI standard. Arguably, as long as no errata have been published it is the current text that is in effect, and that is what pedantic currently does.</li>
<li><i>strict</i>: a slightly less strict view of the standard than does pedantic: it follows the established behaviour where the standard is obviously in error.</li>
<li><i>lax</i>: attempt to provide the smoothest possible interoperability, anticipating future revisions of elements in the standard in areas that other implementations do not adhere to, even though there is no good reason not to.</li></ul>
<p>The default setting is "lax".</p>
          ]]>
        </comment>
        <value>lax</value>
        <value>strict</value>
        <value>pedantic</value>
        <default>lax</default>
      </leafEnum>
    </element>
    <element name="Discovery" minOccurrences="0" maxOccurrences="1" version="COMMERCIAL">
      <comment>
        <![CDATA[
<p>The Discovery element allows specifying various parameters related to the discovery of peers.</p>
        ]]>
      </comment>
      <leafBoolean name="AdvertiseBuiltinTopicWriters" minOccurrences="0" maxOccurrences="1" version="COMMERCIAL">
        <comment>
          <![CDATA[
<p>This element controls whether or not DDSI2E advertises writers for the built-in topics from its discovery for backwards compatibility with older OpenSplice versions.</p>
          ]]>
        </comment>
        <default>true</default>
      </leafBoolean>
      <leafString name="DSGracePeriod" minOccurrences="0" maxOccurrences="1" version="COMMERCIAL">
        <comment>
          <![CDATA[
<p>This setting controls for how long endpoints discovered via a Cloud discovery service will survive after the discovery service disappeared, allowing reconnect without loss of data when the discovery service restarts (or another instance takes over).</p>
<p>Valid values are finite durations with an explicit unit or the keyword 'inf' for infinity. Recognised units: ns, us, ms, s, min, hr, day.</p>
          ]]>
        </comment>
        <maxLength>0</maxLength>
        <default>30 s</default>
      </leafString>
      <leafString name="DefaultMulticastAddress" minOccurrences="0" maxOccurrences="1" version="COMMERCIAL">
        <comment>
          <![CDATA[
<p>This element specifies the default multicast address for all traffic other than participant discovery packets. It defaults to Discovery/SPDPMulticastAddress.</p>
          ]]>
        </comment>
        <maxLength>0</maxLength>
        <default>auto</default>
      </leafString>
      <leafString name="DomainId" minOccurrences="0" maxOccurrences="1" version="COMMERCIAL">
        <comment>
          <![CDATA[
<p>This element allows overriding of the DDS Domain Id that is used for DDSI2E.</p>
          ]]>
        </comment>
        <maxLength>0</maxLength>
        <default>default</default>
      </leafString>
      <leafBoolean name="EnableTopicDiscovery" minOccurrences="0" maxOccurrences="1" version="COMMERCIAL">
        <comment>
          <![CDATA[
<p>Do not use.</p>
          ]]>
        </comment>
        <default>true</default>
      </leafBoolean>
      <leafBoolean name="GenerateBuiltinTopics" minOccurrences="0" maxOccurrences="1" version="COMMERCIAL">
        <comment>
          <![CDATA[
<p>This element controls whether or not DDSI2E generates built-in topics from its discovery. When disabled, it relies on the durability service.</p>
          ]]>
        </comment>
        <default>true</default>
      </leafBoolean>
      <leafInt name="MaxAutoParticipantIndex" minOccurrences="0" maxOccurrences="1" version="COMMERCIAL">
        <comment>
          <![CDATA[
<p>This element specifies the maximum DDSI participant index selected by this instance of the DDSI2E service if the Discovery/ParticipantIndex is "auto".</p>
          ]]>
        </comment>
        <default>9</default>
      </leafInt>
      <leafString name="ParticipantIndex" minOccurrences="0" maxOccurrences="1" version="COMMERCIAL">
        <comment>
          <![CDATA[
<p>This element specifies the DDSI participant index used by this instance of the DDSI2E service for discovery purposes. Only one such participant id is used, independent of the number of actual DomainParticipants on the node. It is either:</p>
<ul><li><i>auto</i>: which will attempt to automatically determine an available participant index (see also Discovery/MaxAutoParticipantIndex), or</li>\n \<li>a non-negative integer less than 120, or</li>
<li><i>none</i>:, which causes it to use arbitrary port numbers for unicast sockets which entirely removes the constraints on the participant index but makes unicast discovery impossible.</li></ul>
<p>The default is <i>auto</i>. The participant index is part of the port number calculation and if predictable port numbers are needed and fixing the participant index has no adverse effects, it is recommended that the second be option be used.</p>
          ]]>
        </comment>
        <maxLength>0</maxLength>
        <default>none</default>
      </leafString>
      <element name="Peers" minOccurrences="0" maxOccurrences="1" version="COMMERCIAL">
        <comment>
          <![CDATA[
<p>This element statically configures addresses for discovery.</p>
<p>Valid values are finite durations with an explicit unit or the keyword 'inf' for infinity. Recognised units: ns, us, ms, s, min, hr, day.</p>
          ]]>
        </comment>
        <maxLength>0</maxLength>
        <element name="Group" minOccurrences="0" maxOccurrences="0" version="COMMERCIAL">
          <comment>
            <![CDATA[
<p>This element statically configures a fault tolerant group of addresses for discovery. Each member of the group is tried in sequence until one succeeds.</p>
            ]]>
          </comment>
          <element name="Peer" minOccurrences="0" maxOccurrences="0" version="COMMERCIAL">
            <comment>
              <![CDATA[
<p>This element statically configures an addresses for discovery.</p>
              ]]>
            </comment>
            <attributeString name="Address" required="true" version="COMMERCIAL">
              <comment>
                <![CDATA[
<p>This element specifies an IP address to which discovery packets must be sent, in addition to the default multicast address (see also General/AllowMulticast). Both a hostnames and a numerical IP address is accepted; the hostname or IP address may be suffixed with :PORT to explicitly set the port to which it must be sent. Multiple Peers may be specified.</p>
                ]]>
              </comment>
              <maxLength>0</maxLength>
              <default></default>
            </attributeString>
          </element>
        </element>
        <element name="Peer" minOccurrences="0" maxOccurrences="0" version="COMMERCIAL">
          <comment>
            <![CDATA[
<p>This element statically configures an addresses for discovery.</p>
            ]]>
          </comment>
          <attributeString name="Address" required="true" version="COMMERCIAL">
            <comment>
              <![CDATA[
<p>This element specifies an IP address to which discovery packets must be sent, in addition to the default multicast address (see also General/AllowMulticast). Both a hostnames and a numerical IP address is accepted; the hostname or IP address may be suffixed with :PORT to explicitly set the port to which it must be sent. Multiple Peers may be specified.</p>
              ]]>
            </comment>
            <maxLength>0</maxLength>
            <default></default>
          </attributeString>
        </element>
      </element>
      <element name="Ports" minOccurrences="0" maxOccurrences="1" version="COMMERCIAL">
        <comment>
          <![CDATA[
<p>The Ports element allows specifying various parameters related to the port numbers used for discovery. These all have default values specified by the DDSI 2.1 specification and rarely need to be changed.</p>
          ]]>
        </comment>
        <leafInt name="Base" minOccurrences="0" maxOccurrences="1" version="COMMERCIAL">
          <comment>
            <![CDATA[
<p>This element specifies the base port number (refer to the DDSI 2.1 specification, section 9.6.1, constant PB).</p>
            ]]>
          </comment>
          <minimum>1</minimum>
          <maximum>65535</maximum>
          <default>7400</default>
        </leafInt>
        <leafInt name="DomainGain" minOccurrences="0" maxOccurrences="1" version="COMMERCIAL">
          <comment>
            <![CDATA[
<p>This element specifies the domain gain, relating domain ids to sets of port numbers (refer to the DDSI 2.1 specification, section 9.6.1, constant DG).</p>
            ]]>
          </comment>
          <default>250</default>
        </leafInt>
        <leafInt name="MulticastDataOffset" minOccurrences="0" maxOccurrences="1" version="COMMERCIAL">
          <comment>
            <![CDATA[
<p>This element specifies the port number for multicast meta traffic (refer to the DDSI 2.1 specification, section 9.6.1, constant d2).</p>
            ]]>
          </comment>
          <default>1</default>
        </leafInt>
        <leafInt name="MulticastMetaOffset" minOccurrences="0" maxOccurrences="1" version="COMMERCIAL">
          <comment>
            <![CDATA[
<p>This element specifies the port number for multicast meta traffic (refer to the DDSI 2.1 specification, section 9.6.1, constant d0).</p>
            ]]>
          </comment>
          <default>0</default>
        </leafInt>
        <leafInt name="ParticipantGain" minOccurrences="0" maxOccurrences="1" version="COMMERCIAL">
          <comment>
            <![CDATA[
<p>This element specifies the participant gain, relating p0, articipant index to sets of port numbers (refer to the DDSI 2.1 specification, section 9.6.1, constant PG).</p>
            ]]>
          </comment>
          <default>2</default>
        </leafInt>
        <leafInt name="UnicastDataOffset" minOccurrences="0" maxOccurrences="1" version="COMMERCIAL">
          <comment>
            <![CDATA[
<p>This element specifies the port number for unicast meta traffic (refer to the DDSI 2.1 specification, section 9.6.1, constant d3).</p>
            ]]>
          </comment>
          <default>11</default>
        </leafInt>
        <leafInt name="UnicastMetaOffset" minOccurrences="0" maxOccurrences="1" version="COMMERCIAL">
          <comment>
            <![CDATA[
<p>This element specifies the port number for unicast meta traffic (refer to the DDSI 2.1 specification, section 9.6.1, constant d1).</p>
            ]]>
          </comment>
          <default>10</default>
        </leafInt>
      </element>
      <leafString name="SPDPInterval" minOccurrences="0" maxOccurrences="1" version="COMMERCIAL">
        <comment>
          <![CDATA[
<p>This element specifies the interval between spontaneous transmissions of participant discovery packets.</p>
<p>The unit must be specified explicitly. Recognised units: ns, us, ms, s, min, hr, day.</p>
          ]]>
        </comment>
        <minimum>0</minimum>
        <maximum>1hr</maximum>
        <maxLength>0</maxLength>
        <default>30 s</default>
      </leafString>
      <leafString name="SPDPMulticastAddress" minOccurrences="0" maxOccurrences="1" version="COMMERCIAL">
        <comment>
          <![CDATA[
<p>This element specifies the multicast address that is used as the destination for the participant discovery packets. In IPv4 mode the default is the (standardised) 239.255.0.1, in IPv6 mode it becomes ff02::ffff:239.255.0.1, which is a non-standardised link-local multicast address.</p>
          ]]>
        </comment>
        <maxLength>0</maxLength>
        <default>239.255.0.1</default>
      </leafString>
    </element>
    <element name="General" minOccurrences="0" maxOccurrences="1" version="COMMERCIAL">
      <comment>
        <![CDATA[
<p>The General element specifies overall DDSI2E service settings.</p>
        ]]>
      </comment>
      <leafString name="AllowMulticast" minOccurrences="0" maxOccurrences="1" version="COMMERCIAL">
        <comment>
          <![CDATA[
<p>This element controls whether DDSI2E uses multicasts for data traffic.</p>
<p>It is a comma-separated list of some of the following keywords: "spdp", "asm", "ssm", or either of "false" or "true".</p>
<ul>
<li><i>spdp</i>: enables the use of ASM (any-source multicast) for participant discovery</li>
<li><i>asm</i>: enables the use of ASM for all traffic (including SPDP)</li>
<li><i>ssm</i>: enables the use of SSM (source-specific multicast) for all non-SPDP traffic (if supported)</li>
</ul>
<p>When set to "false" all multicasting is disabled. The default, "true" enables full use of multicasts. Listening for multicasts can be controlled by General/MulticastRecvNetworkInterfaceAddresses.</p>
          ]]>
        </comment>
        <maxLength>0</maxLength>
        <default>true</default>
      </leafString>
      <leafBoolean name="DontRoute" minOccurrences="0" maxOccurrences="1" version="COMMERCIAL">
        <comment>
          <![CDATA[
<p>This element allows setting the SO_DONTROUTE option for outgoing packets, to bypass the local routing tables. This is generally useful only when the routing tables cannot be trusted, which is highly unusual.</p>
          ]]>
        </comment>
        <default>false</default>
      </leafBoolean>
      <leafBoolean name="EnableLoopback" minOccurrences="0" maxOccurrences="1" version="COMMERCIAL">
        <comment>
          <![CDATA[
<p>This element specifies whether DDSI packets are visible to all DDSI participants in the same process. It must be "true" for intra-process communications, i.e. a reader and writer communicating in the same address space. If enabled and using multicast then EnableMulticastLoopback must also be enabled.</p>
          ]]>
        </comment>
        <default>false</default>
      </leafBoolean>
      <leafBoolean name="EnableMulticastLoopback" minOccurrences="0" maxOccurrences="1" version="COMMERCIAL">
        <comment>
          <![CDATA[
<p>This element specifies whether DDSI2E allows IP multicast packets to be visible to all DDSI participants in the same node, including itself. It must be "true" for intra-node multicast communications, but if a node runs only a single DDSI2E service and does not host any other DDSI-capable programs, it should be set to "false" for improved performance.</p>
          ]]>
        </comment>
        <default>true</default>
      </leafBoolean>
      <leafString name="ExternalNetworkAddress" minOccurrences="0" maxOccurrences="1" version="COMMERCIAL">
        <comment>
          <![CDATA[
<p>This element allows explicitly overruling the network address DDSI2E advertises in the discovery protocol, which by default is the address of the preferred network interface (General/NetworkInterfaceAddress), to allow DDSI2E to communicate across a Network Address Translation (NAT) device.</p>
          ]]>
        </comment>
        <maxLength>0</maxLength>
        <default>auto</default>
      </leafString>
      <leafString name="ExternalNetworkMask" minOccurrences="0" maxOccurrences="1" version="COMMERCIAL">
        <comment>
          <![CDATA[
<p>This element specifies the network mask of the external network address. This element is relevant only when an external network address (General/ExternalNetworkAddress) is explicitly configured. In this case locators received via the discovery protocol that are within the same external subnet (as defined by this mask) will be translated to an internal address by replacing the network portion of the external address with the corresponding portion of the preferred network interface address. This option is IPv4-only.</p>
          ]]>
        </comment>
        <maxLength>0</maxLength>
        <default>0.0.0.0</default>
      </leafString>
      <leafString name="FragmentSize" minOccurrences="0" maxOccurrences="1" version="COMMERCIAL">
        <comment>
          <![CDATA[
<p>This element specifies the size of DDSI sample fragments generated by DDSI2E. Samples larger than FragmentSize are fragmented into fragments of FragmentSize bytes each, except the last one, which may be smaller. The DDSI spec mandates a minimum fragment size of 1025 bytes, but DDSI2E will do whatever size is requested, accepting fragments of which the size is at least the minimum of 1025 and FragmentSize.</p>
<p>The unit must be specified explicitly. Recognised units: B (bytes), kB & KiB (2<sup>10</sup> bytes), MB & MiB (2<sup>20</sup> bytes), GB & GiB (2<sup>30</sup> bytes).</p>
          ]]>
        </comment>
        <maxLength>0</maxLength>
        <default>1280 B</default>
      </leafString>
      <leafString name="MaxMessageSize" minOccurrences="0" maxOccurrences="1" version="COMMERCIAL">
        <comment>
          <![CDATA[
<p>This element specifies the maximum size of the UDP payload that DDSI2E will generate. DDSI2E will try to maintain this limit within the bounds of the DDSI specification, which means that in some cases (especially for very low values of MaxMessageSize) larger payloads may sporadically be observed (currently up to 1192 B).</p>
<p>On some networks it may be necessary to set this item to keep the packetsize below the MTU to prevent IP fragmentation. In those cases, it is generally advisable to also consider reducing Internal/FragmentSize.</p>
<p>The unit must be specified explicitly. Recognised units: B (bytes), kB & KiB (2<sup>10</sup> bytes), MB & MiB (2<sup>20</sup> bytes), GB & GiB (2<sup>30</sup> bytes).</p>
          ]]>
        </comment>
        <maxLength>0</maxLength>
        <default>4096 B</default>
      </leafString>
      <leafString name="MulticastRecvNetworkInterfaceAddresses" minOccurrences="0" maxOccurrences="1" version="COMMERCIAL">
        <comment>
          <![CDATA[
<p>This element specifies on which network interfaces DDSI2E listens to multicasts. The following options are available:</p>
<ul>
<li><i>all</i>: listen for multicasts on all multicast-capable interfaces; or</li>
<li><i>any</i>: listen for multicasts on the operating system default interface; or</li>
<li><i>preferred</i>: listen for multicasts on the preferred interface (General/NetworkInterfaceAddress); or</li>
<li><i>none</i>: does not listen for multicasts on any interface; or</li>
<li>a comma-separated list of network addresses: configures DDSI2E to listen for multicasts on all of the listed addresses.</li>
</ul>
<p>If DDSI2E is in IPv6 mode and the address of the preferred network interface is a link-local address, "all" is treated as a synonym for "preferred" and a comma-separated list is treated as "preferred" if it contains the preferred interface and as "none" if not.</p>
          ]]>
        </comment>
        <maxLength>0</maxLength>
        <default>preferred</default>
      </leafString>
      <leafInt name="MulticastTimeToLive" minOccurrences="0" maxOccurrences="1" version="COMMERCIAL">
        <comment>
          <![CDATA[
<p>This element specifies the time-to-live setting for outgoing multicast packets.</p>
          ]]>
        </comment>
        <minimum>0</minimum>
        <maximum>255</maximum>
        <default>32</default>
      </leafInt>
      <leafString name="NetworkInterfaceAddress" minOccurrences="0" maxOccurrences="1" version="COMMERCIAL">
        <comment>
          <![CDATA[
<p>This element specifies the preferred network interface for use by DDSI2E. The preferred network interface determines the IP address that DDSI2E advertises in the discovery protocol (but see also General/ExternalNetworkAddress), and is also the only interface over which multicasts are transmitted. The interface can be identified by its IP address, network interface name or network portion of the address. If the value "auto" is entered here, DDSI2E will select what it considers the most suitable interface.</p>
          ]]>
        </comment>
        <maxLength>0</maxLength>
        <default>auto</default>
      </leafString>
      <leafBoolean name="StartupModeCoversTransient" minOccurrences="0" maxOccurrences="1" version="COMMERCIAL">
        <comment>
          <![CDATA[
<p>This element configures whether startup-mode should also cover transient and persistent data, for configurations where the durability service does not take care of it. Configurations without defined merge policies best leave this enabled.</p>
          ]]>
        </comment>
        <default>true</default>
      </leafBoolean>
      <leafString name="StartupModeDuration" minOccurrences="0" maxOccurrences="1" version="COMMERCIAL">
        <comment>
          <![CDATA[
<p>This element specifies how long the DDSI2E remains in its "startup" mode. While in "startup" mode all volatile reliable data published on the local node is retained as-if it were transient-local data, allowing existing readers on remote nodes to obtain the data even though discovering them takes some time. Best-effort data by definition need not arrive, and transient and persistent data are covered by the durability service.</p>
<p>Once the system is stable, DDSI2E keeps track of the existence of remote readers whether or not matching writers exist locally, avoiding this discovery delay and ensuring this is merely a node startup issue.</p>
<p>Setting General/StartupModeDuration to 0s will disable it.</p>
<p>The unit must be specified explicitly. Recognised units: ns, us, ms, s, min, hr, day.</p>
          ]]>
        </comment>
        <minimum>0</minimum>
        <maximum>60000</maximum>
        <maxLength>0</maxLength>
        <default>2 s</default>
      </leafString>
      <leafBoolean name="UseIPv6" minOccurrences="0" maxOccurrences="1" version="COMMERCIAL">
        <comment>
          <![CDATA[
<p>This element can be used to DDSI2E use IPv6 instead of IPv4. This is currently an either/or switch.</p>
          ]]>
        </comment>
        <default>false</default>
      </leafBoolean>
    </element>
    <element name="Internal" minOccurrences="0" maxOccurrences="1" version="COMMERCIAL">
      <comment>
        <![CDATA[
<p>The Internal elements deal with a variety of settings that evolving and that are not necessarily fully supported. For the vast majority of the Internal settings, the functionality per-se is supported, but the right to change the way the options control the functionality is reserved. This includes renaming or moving options.</p>
        ]]>
      </comment>
    </element>
    <element name="Partitioning" minOccurrences="0" maxOccurrences="1" version="COMMERCIAL">
      <comment>
        <![CDATA[
<p>The Partitioning element specifies DDSI2E network partitions and how DCPS partition/topic combinations are mapped onto the network partitions.</p>
        ]]>
      </comment>
      <element name="IgnoredPartitions" minOccurrences="0" maxOccurrences="0" version="COMMERCIAL">
        <comment>
          <![CDATA[
<p>The IgnoredPartitions element specifies DCPS partition/topic combinations that are not distributed over the network.</p>
          ]]>
        </comment>
        <element name="IgnoredPartition" minOccurrences="0" maxOccurrences="0" version="COMMERCIAL">
          <comment>
            <![CDATA[
<p>This element can be used to prevent certain combinations of DCPS partition and topic from being transmitted over the network. DDSI2E will complete ignore readers and writers for which all DCPS partitions as well as their topic is ignored, not even creating DDSI readers and writers to mirror the DCPS ones.</p>
            ]]>
          </comment>
          <attributeString name="DCPSPartitionTopic" required="true" version="COMMERCIAL">
            <comment>
              <![CDATA[
<p>This attribute specifies a partition and a topic expression, separated by a single '.', that are used to determine if a given partition and topic will be ignored or not. The expressions may use the usual wildcards '*' and '?'. DDSI2E will consider an wildcard DCPS partition to match an expression iff there exists a string that satisfies both expressions.</p>
              ]]>
            </comment>
            <maxLength>0</maxLength>
            <default></default>
          </attributeString>
        </element>
      </element>
      <element name="NetworkPartitions" minOccurrences="0" maxOccurrences="0" version="COMMERCIAL">
        <comment>
          <![CDATA[
<p>The NetworkPartitions element specifies the DDSI2E network partitions.</p>
          ]]>
        </comment>
        <element name="NetworkPartition" minOccurrences="0" maxOccurrences="0" version="COMMERCIAL">
          <comment>
            <![CDATA[
<p>This element defines a DDSI2E network partition.</p>
            ]]>
          </comment>
          <attributeString name="Address" required="true" version="COMMERCIAL">
            <comment>
              <![CDATA[
<p>This attribute specifies the multicast addresses associated with the network partition as a comma-separated list. Readers matching this network partition (cf. Partitioning/PartitionMappings) will listen for multicasts on all of these addresses and advertise them in the discovery protocol. The writers will select the most suitable address from the addresses advertised by the readers.</p>
              ]]>
            </comment>
            <maxLength>0</maxLength>
            <default></default>
          </attributeString>
          <attributeBoolean name="Connected" required="false" version="COMMERCIAL">
            <comment>
              <![CDATA[
<p>This attribute is a placeholder.</p>
              ]]>
            </comment>
            <default>true</default>
          </attributeBoolean>
          <attributeString name="Name" required="true" version="COMMERCIAL">
            <comment>
              <![CDATA[
<p>This attribute specifies the name of this DDSI2E network partition. Two network partitions cannot have the same name.</p>
              ]]>
            </comment>
            <maxLength>0</maxLength>
            <default></default>
          </attributeString>
          <attributeString name="SecurityProfile" required="false" version="COMMERCIAL">
            <comment>
              <![CDATA[
<p>This attribute selects the DDSI2E security profile for encrypting the traffic mapped to this DDSI2E network partition. The default "null" means the network partition is unsecured; any other name refers to a security profile defined using the Security/SecurityProfile elements.</p>
              ]]>
            </comment>
            <maxLength>0</maxLength>
            <default>null</default>
          </attributeString>
        </element>
      </element>
      <element name="PartitionMappings" minOccurrences="0" maxOccurrences="0" version="COMMERCIAL">
        <comment>
          <![CDATA[
<p>The PartitionMappings element specifies the mapping from DCPS partition/topic combinations to DDSI2E network partitions.</p>
          ]]>
        </comment>
        <element name="PartitionMapping" minOccurrences="0" maxOccurrences="0" version="COMMERCIAL">
          <comment>
            <![CDATA[
<p>This element defines a mapping from a DCPS partition/topic combination to a DDSI2E network partition. This allows partitioning data flows by using special multicast addresses for part of the data and possibly also encrypting the data flow.</p>
            ]]>
          </comment>
          <attributeString name="DCPSPartitionTopic" required="true" version="COMMERCIAL">
            <comment>
              <![CDATA[
<p>This attribute specifies a partition and a topic expression, separated by a single '.', that are used to determine if a given partition and topic maps to the DDSI2E network partition named by the NetworkPartition attribute in this PartitionMapping element. The expressions may use the usual wildcards '*' and '?'. DDSI2E will consider a wildcard DCPS partition to match an expression if there exists a string that satisfies both expressions.</p>
              ]]>
            </comment>
            <maxLength>0</maxLength>
            <default></default>
          </attributeString>
          <attributeString name="NetworkPartition" required="true" version="COMMERCIAL">
            <comment>
              <![CDATA[
<p>This attribute specifies which DDSI2E network partition is to be used for DCPS partition/topic combinations matching the DCPSPartitionTopic attribute within this PartitionMapping element.</p>
              ]]>
            </comment>
            <maxLength>0</maxLength>
            <default></default>
          </attributeString>
        </element>
      </element>
    </element>
    <element name="SSL" minOccurrences="0" maxOccurrences="1" version="COMMERCIAL">
      <comment>
        <![CDATA[
<p>The SSL element allows specifying various parameters related to using SSL/TLS for DDSI over TCP.</p>
        ]]>
      </comment>
      <leafBoolean name="CertificateVerification" minOccurrences="0" maxOccurrences="1" version="COMMERCIAL">
        <comment>
          <![CDATA[
<p>If disabled this allows SSL connections to occur even if an X509 certificate fails verification.</p>
          ]]>
        </comment>
        <default>true</default>
      </leafBoolean>
      <leafString name="Ciphers" minOccurrences="0" maxOccurrences="1" version="COMMERCIAL">
        <comment>
          <![CDATA[
<p>The set of ciphers used by SSL/TLS</p>
          ]]>
        </comment>
        <maxLength>0</maxLength>
        <default>ALL:!ADH:!LOW:!EXP:!MD5:@STRENGTH</default>
      </leafString>
      <leafBoolean name="Enable" minOccurrences="0" maxOccurrences="1" version="COMMERCIAL">
        <comment>
          <![CDATA[
<p>This enables SSL/TLS for TCP.</p>
          ]]>
        </comment>
        <default>false</default>
      </leafBoolean>
      <leafString name="EntropyFile" minOccurrences="0" maxOccurrences="1" version="COMMERCIAL">
        <comment>
          <![CDATA[
<p>The SSL/TLS random entropy file name.</p>
          ]]>
        </comment>
        <maxLength>0</maxLength>
        <default></default>
      </leafString>
      <leafString name="KeyPassphrase" minOccurrences="0" maxOccurrences="1" version="COMMERCIAL">
        <comment>
          <![CDATA[
<p>The SSL/TLS key pass phrase for encrypted keys.</p>
          ]]>
        </comment>
        <maxLength>0</maxLength>
        <default>secret</default>
      </leafString>
      <leafString name="KeystoreFile" minOccurrences="0" maxOccurrences="1" version="COMMERCIAL">
        <comment>
          <![CDATA[
<p>The SSL/TLS key and certificate store file name. The keystore must be in PEM format.</p>
          ]]>
        </comment>
        <maxLength>0</maxLength>
        <default>keystore</default>
      </leafString>
      <leafBoolean name="SelfSignedCertificates" minOccurrences="0" maxOccurrences="1" version="COMMERCIAL">
        <comment>
          <![CDATA[
<p>This enables the use of self signed X509 certificates.</p>
          ]]>
        </comment>
        <default>false</default>
      </leafBoolean>
      <leafBoolean name="VerifyClient" minOccurrences="0" maxOccurrences="1" version="COMMERCIAL">
        <comment>
          <![CDATA[
<p>This enables an SSL server checking the X509 certificate of a connecting client.</p>
          ]]>
        </comment>
        <default>false</default>
      </leafBoolean>
    </element>
    <element name="Security" minOccurrences="0" maxOccurrences="1" version="COMMERCIAL">
      <comment>
        <![CDATA[
<p>The Security element specifies DDSI2E security profiles that can be used to encrypt traffic mapped to DDSI2E network partitions.</p>
        ]]>
      </comment>
      <element name="SecurityProfile" minOccurrences="0" maxOccurrences="0" version="COMMERCIAL">
        <comment>
          <![CDATA[
<p>This element defines a DDSI2E security profile.</p>
          ]]>
        </comment>
        <attributeEnum name="Cipher" required="false" version="COMMERCIAL">
          <comment>
            <![CDATA[
<p>This attribute specifies the cipher to be used for encrypting traffic over network partitions secured by this security profile. The possible ciphers are:</p>
<ul><li><i>aes128</i>: AES with a 128-bit key;</li>
<li><i>aes192</i>: AES with a 192-bit key;</li>
<li><i>aes256</i>: AES with a 256-bit key;</li>
<li><i>blowfish</i>: the Blowfish cipher with a 128 bit key;</li>
<li><i>null</i>: no encryption;</li></ul>
<p>SHA1 is used on conjunction with all ciphers except "null" to ensure data integrity.</p>
            ]]>
          </comment>
          <value>null</value>
          <value>blowfish</value>
          <value>aes128</value>
          <value>aes192</value>
          <value>aes256</value>
          <default>null</default>
        </attributeEnum>
        <attributeString name="CipherKey" required="false" version="COMMERCIAL">
          <comment>
            <![CDATA[
<p>The CipherKey attribute is used to define the secret key required by the cipher selected using the Cipher attribute. The value can be a URI referencing an external file containing the secret key, or the secret key can be defined in-place as a string value.</p>
<p>The key must be specified as a hexadecimal string with each character representing 4 bits of the key. E.g., 1ABC represents the 16-bit key 0001 1010 1011 1100. The key should not follow a well-known pattern and must exactly match the key length of the selected cipher.</p>
<p>A malformed key will cause the security profile to be marked as invalid, and disable all network partitions secured by the (invalid) security profile to prevent information leaks.</p>
<p>As all DDS applications require read access to the XML configuration file, for security reasons it is recommended to store the secret key in an external file in the file system, referenced by its URI. The file should be protected against read and write access from other users on the host.</p>
            ]]>
          </comment>
          <maxLength>0</maxLength>
          <default></default>
        </attributeString>
        <attributeString name="Name" required="true" version="COMMERCIAL">
          <comment>
            <![CDATA[
<p>This attribute specifies the name of this DDSI2E security profile. Two security profiles cannot have the same name.</p>
            ]]>
          </comment>
          <maxLength>0</maxLength>
          <default></default>
        </attributeString>
      </element>
    </element>
    <element name="Sizing" minOccurrences="0" maxOccurrences="1" version="COMMERCIAL">
      <comment>
        <![CDATA[
<p>The Sizing element specifies a variety of configuration settings dealing with expected system sizes, buffer sizes, &c.</p>
        ]]>
      </comment>
      <leafString name="ReceiveBufferChunkSize" minOccurrences="0" maxOccurrences="1" version="COMMERCIAL">
        <comment>
          <![CDATA[
<p>This element specifies the size of one allocation unit in the receive buffer. Must be greater than the maximum packet size by a modest amount (too large packets are dropped). Each allocation is shrunk immediately after processing a message, or freed straightaway.</p>
<p>The unit must be specified explicitly. Recognised units: B (bytes), kB & KiB (2<sup>10</sup> bytes), MB & MiB (2<sup>20</sup> bytes), GB & GiB (2<sup>30</sup> bytes).</p>
          ]]>
        </comment>
        <maxLength>0</maxLength>
        <default>128 KiB</default>
      </leafString>
      <element name="Watermarks" minOccurrences="0" maxOccurrences="1" version="COMMERCIAL">
        <comment>
          <![CDATA[
  { LEAF ("ReceiveBufferSize"), 1, "1 MiB", ABSOFF (rbuf_size), 0, uf_memsize, 0, pf_memsize,    "<p>This element sets the size of a single receive buffer. Many receive buffers may be needed. Their size must be greater than ReceiveBufferChunkSize by a modest amount.</p>
          ]]>
        </comment>
        <leafBoolean name="WhcAdaptive" minOccurrences="0" maxOccurrences="1" version="COMMERCIAL">
          <comment>
            <![CDATA[
<p>This element controls whether DDSI2E will adapt the high-water mark to current traffic conditions, based on retransmit requests and transmit pressure.</p>
            ]]>
          </comment>
          <default>true</default>
        </leafBoolean>
        <leafString name="WhcHigh" minOccurrences="0" maxOccurrences="1" version="COMMERCIAL">
          <comment>
            <![CDATA[
<p>This element sets the maximum allowed high-water mark for the DDSI2E WHCs, expressed in bytes. A writer is suspended when the WHC reaches this size.</p>
<p>The unit must be specified explicitly. Recognised units: B (bytes), kB & KiB (2<sup>10</sup> bytes), MB & MiB (2<sup>20</sup> bytes), GB & GiB (2<sup>30</sup> bytes).</p>
            ]]>
          </comment>
          <maxLength>0</maxLength>
          <default>100 kB</default>
        </leafString>
        <leafString name="WhcHighInit" minOccurrences="0" maxOccurrences="1" version="COMMERCIAL">
          <comment>
            <![CDATA[
<p>This element sets the initial level of the high-water mark for the DDSI2E WHCs, expressed in bytes.</p>
<p>The unit must be specified explicitly. Recognised units: B (bytes), kB & KiB (2<sup>10</sup> bytes), MB & MiB (2<sup>20</sup> bytes), GB & GiB (2<sup>30</sup> bytes).</p>
            ]]>
          </comment>
          <maxLength>0</maxLength>
          <default>30 kB</default>
        </leafString>
        <leafString name="WhcLow" minOccurrences="0" maxOccurrences="1" version="COMMERCIAL">
          <comment>
            <![CDATA[
<p>This element sets the low-water mark for the DDSI2E WHCs, expressed in bytes. A suspended writer resumes transmitting when its DDSI2E WHC shrinks to this size.</p>
<p>The unit must be specified explicitly. Recognised units: B (bytes), kB & KiB (2<sup>10</sup> bytes), MB & MiB (2<sup>20</sup> bytes), GB & GiB (2<sup>30</sup> bytes).</p>
            ]]>
          </comment>
          <maxLength>0</maxLength>
          <default>1 kB</default>
        </leafString>
      </element>
    </element>
    <element name="TCP" minOccurrences="0" maxOccurrences="1" version="COMMERCIAL">
      <comment>
        <![CDATA[
<p>The TCP element allows specifying various parameters related to running DDSI over TCP.</p>
        ]]>
      </comment>
      <leafBoolean name="Enable" minOccurrences="0" maxOccurrences="1" version="COMMERCIAL">
        <comment>
          <![CDATA[
<p>This element enables the optional TCP transport.</p>
          ]]>
        </comment>
        <default>false</default>
      </leafBoolean>
      <leafBoolean name="NoDelay" minOccurrences="0" maxOccurrences="1" version="COMMERCIAL">
        <comment>
          <![CDATA[
<p>This element enables the TCP_NODELAY socket option, preventing multiple DDSI messages being sent in the same TCP request. Setting this option typically optimises latency over throughput.</p>
          ]]>
        </comment>
        <default>true</default>
      </leafBoolean>
      <leafInt name="Port" minOccurrences="0" maxOccurrences="1" version="COMMERCIAL">
        <comment>
          <![CDATA[
<p>This element specifies the TCP port number on which DDSI2E accepts connections. If the port is set it is used in entity locators, published with DDSI discovery. Dynamically allocated if zero. Disabled if -1 or not configured. If disabled other DDSI services will not be able to establish connections with the service, the service can only communicate by establishing connections to other services.</p>
          ]]>
        </comment>
        <minimum>-1</minimum>
        <maximum>65535</maximum>
        <default>-1</default>
      </leafInt>
      <leafString name="ReadTimeout" minOccurrences="0" maxOccurrences="1" version="COMMERCIAL">
        <comment>
          <![CDATA[
<p>This element specifies the timeout for blocking TCP read operations. If this timeout expires then the connection is closed.</p>
<p>The unit must be specified explicitly. Recognised units: ns, us, ms, s, min, hr, day.</p>
          ]]>
        </comment>
        <minimum>0</minimum>
        <maximum>1hr</maximum>
        <maxLength>0</maxLength>
        <default>2 s</default>
      </leafString>
      <leafString name="WriteTimeout" minOccurrences="0" maxOccurrences="1" version="COMMERCIAL">
        <comment>
          <![CDATA[
<p>This element specifies the timeout for blocking TCP write operations. If this timeout expires then the connection is closed.</p>
<p>The unit must be specified explicitly. Recognised units: ns, us, ms, s, min, hr, day.</p>
          ]]>
        </comment>
        <minimum>0</minimum>
        <maximum>1hr</maximum>
        <maxLength>0</maxLength>
        <default>2 s</default>
      </leafString>
    </element>
    <element name="ThreadPool" minOccurrences="0" maxOccurrences="1" version="COMMERCIAL">
      <comment>
        <![CDATA[
<p>The ThreadPool element allows specifying various parameters related to using a thread pool to send DDSI messages to multiple unicast addresses (TCP or UDP).</p>
        ]]>
      </comment>
      <leafBoolean name="Enable" minOccurrences="0" maxOccurrences="1" version="COMMERCIAL">
        <comment>
          <![CDATA[
<p>This element enables the optional thread pool.</p>
          ]]>
        </comment>
        <default>false</default>
      </leafBoolean>
      <leafInt name="ThreadMax" minOccurrences="0" maxOccurrences="1" version="COMMERCIAL">
        <comment>
          <![CDATA[
<p>This elements configures the maximum number of threads in the thread pool.</p>
          ]]>
        </comment>
        <default>8</default>
      </leafInt>
      <leafInt name="Threads" minOccurrences="0" maxOccurrences="1" version="COMMERCIAL">
        <comment>
          <![CDATA[
<p>This elements configures the initial number of threads in the thread pool.</p>
          ]]>
        </comment>
        <default>4</default>
      </leafInt>
    </element>
    <element name="Threads" minOccurrences="0" maxOccurrences="1" version="COMMERCIAL">
      <comment>
        <![CDATA[
<p>This element is used to set thread properties.</p>
        ]]>
      </comment>
      <element name="Thread" minOccurrences="0" maxOccurrences="1000" version="COMMERCIAL">
        <comment>
          <![CDATA[
<p>This element is used to set thread properties.</p>
          ]]>
        </comment>
        <attributeString name="Name" required="true" version="COMMERCIAL">
          <comment>
            <![CDATA[
<p>The Name of the thread for which properties are being set. The following threads exist:</p>
<ul><li><i>gc</i>: garbage collector thread involved in deleting entities;</li>
<li><i>recv</i>: receive thread, taking data from the network and running the protocol state machine;</li>
<li><i>dq.builtins</i>: delivery thread for DDSI-builtin data, primarily for discovery;</li>
<li><i>lease</i>: DDSI liveliness monitoring;</li>
<li><i>tev</i>: general timed-event handling, retransmits and discovery;</li>
<li><i>xmit.CHAN</i>: transmit thread for channel CHAN;</li>
<li><i>dq.CHAN</i>: delivery thread for channel CHAN;</li>
<li><i>tev.CHAN</i>: timed-even thread for channel CHAN.</li></ul>
            ]]>
          </comment>
          <maxLength>0</maxLength>
          <default></default>
        </attributeString>
        <element name="Scheduling" minOccurrences="0" maxOccurrences="1" version="COMMERCIAL">
          <comment>
            <![CDATA[
<p>This element configures the scheduling properties of the thread.</p>
            ]]>
          </comment>
          <maxLength>0</maxLength>
          <leafEnum name="Class" minOccurrences="0" maxOccurrences="1" version="COMMERCIAL">
            <comment>
              <![CDATA[
<p>This element specifies the thread scheduling class (<i>realtime</i>, <i>timeshare</i> or <i>default</i>). The user may need special privileges from the underlying operating system to be able to assign some of the privileged scheduling classes.</p>
              ]]>
            </comment>
            <value>realtime</value>
            <value>timeshare</value>
            <value>default</value>
            <default>default</default>
          </leafEnum>
          <leafString name="Priority" minOccurrences="0" maxOccurrences="1" version="COMMERCIAL">
            <comment>
              <![CDATA[
<p>This element specifies the thread priority (decimal integer or <i>default</i>). Only priorities that are supported by the underlying operating system can be assigned to this element. The user may need special privileges from the underlying operating system to be able to assign some of the privileged priorities.</p>
              ]]>
            </comment>
            <maxLength>0</maxLength>
            <default>default</default>
          </leafString>
        </element>
        <leafString name="StackSize" minOccurrences="0" maxOccurrences="1" version="COMMERCIAL">
          <comment>
            <![CDATA[
<p>This element configures the stack size for this thread. The default value <i>default</i> leaves the stack size at the operating system default.</p>
<p>The unit must be specified explicitly. Recognised units: B (bytes), kB & KiB (2<sup>10</sup> bytes), MB & MiB (2<sup>20</sup> bytes), GB & GiB (2<sup>30</sup> bytes).</p>
            ]]>
          </comment>
          <maxLength>0</maxLength>
          <default>default</default>
        </leafString>
      </element>
    </element>
    <element name="Tracing" minOccurrences="0" maxOccurrences="1" version="COMMERCIAL">
      <comment>
        <![CDATA[
<p>The Tracing element controls the amount and type of information that is written into the tracing log by the DDSI service. This is useful to track the DDSI service during application development.</p>
        ]]>
      </comment>
      <leafBoolean name="AppendToFile" minOccurrences="0" maxOccurrences="1" version="COMMERCIAL">
        <comment>
          <![CDATA[
<p>This option specifies whether the output is to be appended to an existing log file. The default is to create a new log file each time, which is generally the best option if a detailed log is generated.</p>
          ]]>
        </comment>
        <default>false</default>
      </leafBoolean>
      <leafString name="EnableCategory" minOccurrences="0" maxOccurrences="1" version="COMMERCIAL">
        <comment>
          <![CDATA[
<p>This element enables individual logging categories. These are enabled in addition to those enabled by Tracing/Verbosity. Recognised categories are:</p>
<ul><li><i>fatal</i>: all fatal errors, errors causing immediate termination</li>
<li><i>error</i>: failures probably impacting correctness but not necessarily causing immediate termination</li>
<li><i>warning</i>: abnormal situations that will likely not impact correctness</li>
<li><i>config</i>: full dump of the configuration</li>
<li><i>info</i>: general informational notices</li>
<li><i>discovery</i>: all discovery activity</li>
<li><i>data</i>: include data content of samples in traces</li>
<li><i>radmin</i>: receive buffer administration</li>
<li><i>timing</i>: periodic reporting of CPU loads per thread</li>
<li><i>traffic</i>: periodic reporting of total outgoing data</li>
<li><i>whc</i>: tracing of writer history cache changes</li>
<li><i>tcp</i>: tracing of TCP-specific activity</li>
<li><i>topic</i>: tracing of topic definitions</li>
<li>>i>plist</i>: tracing of discovery parameter list interpretation</li> </ul>
<p>In addition, there is the keyword <i>trace</i> that enables all but <i>radmin</i>, <i>topic</i>, <i>plist</i> and <i>whc</i></p>.
<p>The categorisation of tracing output is incomplete and hence most of the verbosity levels and categories are not of much use in the current release. This is an ongoing process and here we describe the target situation rather than the current situation. Currently, the most useful is <i>trace</i>.</p>
          ]]>
        </comment>
        <maxLength>0</maxLength>
        <default></default>
      </leafString>
      <leafString name="OutputFile" minOccurrences="0" maxOccurrences="1" version="COMMERCIAL">
        <comment>
          <![CDATA[
<p>This option specifies where the logging is printed to. Note that <i>stdout</i> and <i>stderr</i> are treated as special values, representing "standard out" and "standard error" respectively. No file is created unless logging categories are enabled using the Tracing/Verbosity or Tracing/EnabledCategory settings.</p>
          ]]>
        </comment>
        <maxLength>0</maxLength>
        <default>VDDSC_PROJECTNAME_SMALL"-trace.log"</default>
      </leafString>
      <leafString name="PacketCaptureFile" minOccurrences="0" maxOccurrences="1" version="COMMERCIAL">
        <comment>
          <![CDATA[
<p>This option specifies the file to which received and sent packets will be logged in the "pcap" format suitable for analysis using common networking tools, such as WireShark. IP and UDP headers are ficitious, in particular the destination address of received packets. The TTL may be used to distinguish between sent and received packets: it is 255 for sent packets and 128 for received ones. Currently IPv4 only.</p>
          ]]>
        </comment>
        <maxLength>0</maxLength>
        <default></default>
      </leafString>
      <leafBoolean name="Timestamps" minOccurrences="0" maxOccurrences="1" version="COMMERCIAL">
        <comment>
          <![CDATA[
<p>This option has no effect.</p>
          ]]>
        </comment>
        <default>true</default>
        <attributeBoolean name="absolute" required="false" version="COMMERCIAL">
          <comment>
            <![CDATA[
<p>This option has no effect</p>
            ]]>
          </comment>
          <default>true</default>
        </attributeBoolean>
      </leafBoolean>
      <leafEnum name="Verbosity" minOccurrences="0" maxOccurrences="1" version="COMMERCIAL">
        <comment>
          <![CDATA[
<p>This element enables standard groups of categories, based on a desired verbosity level. This is in addition to the categories enabled by the Tracing/EnableCategory setting. Recognised verbosity levels and the categories they map to are:</p>
<ul><li><i>none</i>: no DDSI2E log</li>
<li><i>severe</i>: error and fatal</li>
<li><i>warning</i>: <i>severe</i> + warning</li>
<li><i>info</i>: <i>warning</i> + info</li>
<li><i>config</i>: <i>info</i> + config</li>
<li><i>fine</i>: <i>config</i> + discovery</li>
<li><i>finer</i>: <i>fine</i> + traffic and timing</li>
<li><i>finest</i>: <i>finer</i> + trace</li></ul>
<p>While <i>none</i> prevents any message from being written to a DDSI2 log file.</p>
<p>The categorisation of tracing output is incomplete and hence most of the verbosity levels and categories are not of much use in the current release. This is an ongoing process and here we describe the target situation rather than the current situation. Currently, the most useful verbosity levels are <i>config</i>, <i>fine</i> and <i>finest</i>.</p>
          ]]>
        </comment>
        <value>finest</value>
        <value>finer</value>
        <value>fine</value>
        <value>config</value>
        <value>info</value>
        <value>warning</value>
        <value>severe</value>
        <value>none</value>
        <default>none</default>
      </leafEnum>
    </element>
    <element name="Watchdog" minOccurrences="0" maxOccurrences="1" version="COMMERCIAL">
      <comment>
        <![CDATA[
<p>This element specifies the type of OS scheduling class will be used by the thread that announces its liveliness periodically.</p>
        ]]>
      </comment>
      <element name="Scheduling" minOccurrences="0" maxOccurrences="1" version="COMMERCIAL">
        <comment>
          <![CDATA[
<p>This element specifies the type of OS scheduling class will be used by the thread that announces its liveliness periodically.</p>
          ]]>
        </comment>
        <leafEnum name="Class" minOccurrences="0" maxOccurrences="1" version="COMMERCIAL">
          <comment>
            <![CDATA[
<p>This element specifies the thread scheduling class that will be used by the watchdog thread. The user may need the appropriate privileges from the underlying operating system to be able to assign some of the privileged scheduling classes.</p>
            ]]>
          </comment>
          <value>realtime</value>
          <value>timeshare</value>
          <value>default</value>
          <default>default</default>
        </leafEnum>
        <leafInt name="Priority" minOccurrences="0" maxOccurrences="1" version="COMMERCIAL">
          <comment>
            <![CDATA[
<p>This element specifies the thread priority. Only priorities that are supported by the underlying operating system can be assigned to this element. The user may need special privileges from the underlying operating system to be able to assign some of the privileged priorities.</p>
            ]]>
          </comment>
          <default>0</default>
          <attributeEnum name="priority_kind" required="false" version="COMMERCIAL">
            <comment>
              <![CDATA[
<p>This attribute specifies whether the specified Priority is a relative or absolute priority.</p>
              ]]>
            </comment>
            <value>relative</value>
            <value>absolute</value>
            <default>relative</default>
          </attributeEnum>
        </leafInt>
      </element>
    </element>
  </element>
  <!-- END DDSI2E CONFIGURATION AUTOMAGICALLY GENERATED (see src/services/ddsi2e/extract-configuration-xml.awk) -->

</splice_meta_config>
